// <auto-generated />
using System;
using ILS_BE.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ILS_BE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_challenge_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_challenge_categories_name");

                    b.ToTable("challenge_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenges related to web security.",
                            Name = "Web Security",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenges related to cryptography.",
                            Name = "Cryptography",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenges related to reverse engineering.",
                            Name = "Reverse Engineering",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenges related to binary exploitation.",
                            Name = "Binary Exploitation",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_challenge_files");

                    b.HasIndex("ChallengeId")
                        .HasDatabaseName("ix_challenge_files_challenge_id");

                    b.ToTable("challenge_files", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsProblem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_problem");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("integer")
                        .HasColumnName("problem_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_challenge_nodes");

                    b.HasIndex("ProblemId")
                        .IsUnique()
                        .HasDatabaseName("ix_challenge_nodes_problem_id");

                    b.ToTable("challenge_nodes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsProblem = false,
                            Path = ".",
                            Title = "Root Challenge Node",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("ChallengeStateId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_state_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_challenge_problems");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_challenge_problems_category_id");

                    b.HasIndex("ChallengeStateId")
                        .HasDatabaseName("ix_challenge_problems_challenge_state_id");

                    b.ToTable("challenge_problems", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeProblemTag", b =>
                {
                    b.Property<int>("ChallengeProblemId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_problem_id");

                    b.Property<int>("ChallengeTagId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ChallengeProblemId", "ChallengeTagId")
                        .HasName("pk_challenge_problem_tags");

                    b.HasIndex("ChallengeTagId")
                        .HasDatabaseName("ix_challenge_problem_tags_challenge_tag_id");

                    b.ToTable("challenge_problem_tags", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_challenge_states");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_challenge_states_name");

                    b.ToTable("challenge_states", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenge is open for participation.",
                            Name = "Open",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Challenge is closed.",
                            Name = "Closed",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_challenge_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_challenge_tags_name");

                    b.ToTable("challenge_tags", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeWriteup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_challenge_writeups");

                    b.HasIndex("ChallengeId")
                        .HasDatabaseName("ix_challenge_writeups_challenge_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_challenge_writeups_user_id");

                    b.ToTable("challenge_writeups", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ExternalLogin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProviderData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_data");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "Provider")
                        .HasName("pk_external_logins");

                    b.HasIndex("ProviderUserId")
                        .HasDatabaseName("ix_external_logins_provider_user_id");

                    b.ToTable("external_logins", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_learn_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_categories_name");

                    b.ToTable("learn_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Crypto related modules",
                            Name = "Crypto"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pwn related modules",
                            Name = "Pwn"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Rev related modules",
                            Name = "Rev"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Web related modules",
                            Name = "Web"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Xp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_learn_lessons");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_learn_lessons_type_id");

                    b.ToTable("learn_lessons", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnLessonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_learn_lesson_types");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_lesson_types_name");

                    b.ToTable("learn_lesson_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Markdown lesson",
                            Name = "Markdown"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Video lesson",
                            Name = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Quiz lesson",
                            Name = "Quiz"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnLifecycleState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_learn_lifecycle_states");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_lifecycle_states_name");

                    b.ToTable("learn_lifecycle_states", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Module is being created",
                            Name = "Creating"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Module is being updated",
                            Name = "Updating"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Module is published",
                            Name = "Published"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("duration");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<int>("LifecycleStateId")
                        .HasColumnType("integer")
                        .HasColumnName("lifecycle_state_id");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer")
                        .HasColumnName("node_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Xp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_learn_modules");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_learn_modules_category_id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_learn_modules_created_by");

                    b.HasIndex("LifecycleStateId")
                        .HasDatabaseName("ix_learn_modules_lifecycle_state_id");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_modules_node_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_modules_title");

                    b.ToTable("learn_modules", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnModuleTag", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ModuleId", "TagId")
                        .HasName("pk_learn_module_tags");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_learn_module_tags_module_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_learn_module_tags_tag_id");

                    b.ToTable("learn_module_tags", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsLesson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_lesson");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_learn_nodes");

                    b.HasIndex("LessonId")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_nodes_lesson_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_nodes_title");

                    b.ToTable("learn_nodes", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnProgressState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_learn_progress_states");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_progress_states_name");

                    b.ToTable("learn_progress_states", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Module is not started",
                            Name = "Locked"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Module is being learned",
                            Name = "Learning"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Module is completed",
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_learn_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_learn_tags_name");

                    b.ToTable("learn_tags", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Auth.Login"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Auth.Register"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Auth.Logout"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Auth.ChangePassword"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ChallengeCategory.GetAll"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ChallengeCategory.Get"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ChallengeCategory.Create"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ChallengeCategory.Update"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ChallengeCategory.Delete"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ChallengeNode.GetPaginated"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ChallengeNode.Create"
                        },
                        new
                        {
                            Id = 12,
                            Name = "ChallengeNode.Get"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ChallengeNode.Update"
                        },
                        new
                        {
                            Id = 14,
                            Name = "ChallengeNode.Delete"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ChallengeProblem.GetAll"
                        },
                        new
                        {
                            Id = 16,
                            Name = "ChallengeProblem.Get"
                        },
                        new
                        {
                            Id = 17,
                            Name = "ChallengeProblem.Create"
                        },
                        new
                        {
                            Id = 18,
                            Name = "ChallengeProblem.Update"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ChallengeProblem.Delete"
                        },
                        new
                        {
                            Id = 20,
                            Name = "ChallengeProblem.UploadFile"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ChallengeProblem.UpdateFile"
                        },
                        new
                        {
                            Id = 22,
                            Name = "ChallengeState.GetAll"
                        },
                        new
                        {
                            Id = 23,
                            Name = "ChallengeState.Get"
                        },
                        new
                        {
                            Id = 24,
                            Name = "ChallengeState.Update"
                        },
                        new
                        {
                            Id = 25,
                            Name = "ChallengeTag.GetAll"
                        },
                        new
                        {
                            Id = 26,
                            Name = "ChallengeTag.Get"
                        },
                        new
                        {
                            Id = 27,
                            Name = "ChallengeTag.Create"
                        },
                        new
                        {
                            Id = 28,
                            Name = "ChallengeTag.Update"
                        },
                        new
                        {
                            Id = 29,
                            Name = "ChallengeTag.Delete"
                        },
                        new
                        {
                            Id = 30,
                            Name = "CheckFlag.CheckFlag"
                        },
                        new
                        {
                            Id = 31,
                            Name = "LearnCategories.GetAll"
                        },
                        new
                        {
                            Id = 32,
                            Name = "LearnCategories.Get"
                        },
                        new
                        {
                            Id = 33,
                            Name = "LearnCategories.Create"
                        },
                        new
                        {
                            Id = 34,
                            Name = "LearnCategories.Update"
                        },
                        new
                        {
                            Id = 35,
                            Name = "LearnCategories.Delete"
                        },
                        new
                        {
                            Id = 36,
                            Name = "LearnLessons.GetAll"
                        },
                        new
                        {
                            Id = 37,
                            Name = "LearnLessons.Get"
                        },
                        new
                        {
                            Id = 38,
                            Name = "LearnLessons.Create"
                        },
                        new
                        {
                            Id = 39,
                            Name = "LearnLessons.Update"
                        },
                        new
                        {
                            Id = 40,
                            Name = "LearnLessons.Delete"
                        },
                        new
                        {
                            Id = 41,
                            Name = "LearnLessonTypes.GetAll"
                        },
                        new
                        {
                            Id = 42,
                            Name = "LearnLessonTypes.Get"
                        },
                        new
                        {
                            Id = 43,
                            Name = "LearnLessonTypes.Update"
                        },
                        new
                        {
                            Id = 44,
                            Name = "LearnLifecycleStates.GetAll"
                        },
                        new
                        {
                            Id = 45,
                            Name = "LearnLifecycleStates.Get"
                        },
                        new
                        {
                            Id = 46,
                            Name = "LearnLifecycleStates.Put"
                        },
                        new
                        {
                            Id = 47,
                            Name = "LearnModules.GetAll"
                        },
                        new
                        {
                            Id = 48,
                            Name = "LearnModules.Get"
                        },
                        new
                        {
                            Id = 49,
                            Name = "LearnModules.Create"
                        },
                        new
                        {
                            Id = 50,
                            Name = "LearnModules.Update"
                        },
                        new
                        {
                            Id = 51,
                            Name = "LearnModules.Delete"
                        },
                        new
                        {
                            Id = 52,
                            Name = "LearnNodes.GetAll"
                        },
                        new
                        {
                            Id = 53,
                            Name = "LearnNodes.Get"
                        },
                        new
                        {
                            Id = 54,
                            Name = "LearnNodes.Create"
                        },
                        new
                        {
                            Id = 55,
                            Name = "LearnNodes.Update"
                        },
                        new
                        {
                            Id = 56,
                            Name = "LearnNodes.Delete"
                        },
                        new
                        {
                            Id = 57,
                            Name = "LearnNodes.GetTree"
                        },
                        new
                        {
                            Id = 58,
                            Name = "LearnNodes.UpdateTree"
                        },
                        new
                        {
                            Id = 59,
                            Name = "LearnProgressStates.GetAll"
                        },
                        new
                        {
                            Id = 60,
                            Name = "LearnProgressStates.Get"
                        },
                        new
                        {
                            Id = 61,
                            Name = "LearnProgressStates.Update"
                        },
                        new
                        {
                            Id = 62,
                            Name = "LearnTags.GetAll"
                        },
                        new
                        {
                            Id = 63,
                            Name = "LearnTags.Get"
                        },
                        new
                        {
                            Id = 64,
                            Name = "LearnTags.Create"
                        },
                        new
                        {
                            Id = 65,
                            Name = "LearnTags.Update"
                        },
                        new
                        {
                            Id = 66,
                            Name = "LearnTags.Delete"
                        },
                        new
                        {
                            Id = 67,
                            Name = "MyUser.Get"
                        },
                        new
                        {
                            Id = 68,
                            Name = "MyUser.Update"
                        },
                        new
                        {
                            Id = 69,
                            Name = "MyUser.GetPermissions"
                        },
                        new
                        {
                            Id = 70,
                            Name = "MyUser.GetRoles"
                        },
                        new
                        {
                            Id = 71,
                            Name = "MyUser.GetProfile"
                        },
                        new
                        {
                            Id = 72,
                            Name = "MyUser.GetModuleProgress"
                        },
                        new
                        {
                            Id = 73,
                            Name = "MyUser.UpdateLearnModuleProgress"
                        },
                        new
                        {
                            Id = 74,
                            Name = "MyUser.UpdateLearnLessonFinish"
                        },
                        new
                        {
                            Id = 75,
                            Name = "MyUser.GetLessonFinish"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Permissions.GetAll"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Permissions.Get"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Permissions.Put"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Roles.GetAll"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Roles.Get"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Roles.Create"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Roles.Update"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Roles.Delete"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Roles.GetPermissions"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Roles.AddPermission"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Roles.RemovePermission"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Users.GetAll"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Users.GetByUsername"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Users.GetByEmail"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Users.Get"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Users.Update"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Users.GetProfile"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Users.GetPermissions"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Users.AddPermission"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Users.RemovePermission"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Users.GetRoles"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Users.AddRole"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Users.RemoveRole"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Users.GetUserScoreboard"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Changeable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("changeable");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Changeable = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Changeable = false,
                            Name = "Collaborator"
                        },
                        new
                        {
                            Id = 3,
                            Changeable = false,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 49,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 50,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 51,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 52,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 53,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 54,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 55,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 56,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 57,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 58,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 59,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 60,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 61,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 62,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 63,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 64,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 65,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 66,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 67,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 68,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 69,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 70,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 71,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 72,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 73,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 74,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 75,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 76,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 77,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 78,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 79,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 80,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 81,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 82,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 83,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 84,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 85,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 86,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 87,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 88,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 89,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 90,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 91,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 92,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 93,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 94,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 95,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 96,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 97,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 98,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 99,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 100,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 101,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("email_verified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("RequirePasswordReset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("require_password_reset");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailVerified = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHjE3hY5B8vL0+2kQFwd+ASKpRjfOV255rUBrem4+2nYCm7NK8X7ZFbLr3JBaW/AYQ==",
                            RequirePasswordReset = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserChallengeFinish", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_id");

                    b.Property<DateTime>("FinishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "ChallengeId")
                        .HasName("pk_user_challenge_finishes");

                    b.HasIndex("ChallengeId")
                        .HasDatabaseName("ix_user_challenge_finishes_challenge_id");

                    b.ToTable("user_challenge_finishes", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserFinishedLesson", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "LessonId")
                        .HasName("pk_user_finished_lessons");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_user_finished_lessons_lesson_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_finished_lessons_user_id");

                    b.ToTable("user_finished_lessons", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserModuleProgress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("ProgressStateId")
                        .HasColumnType("integer")
                        .HasColumnName("progress_state_id");

                    b.HasKey("UserId", "ModuleId")
                        .HasName("pk_user_module_progresses");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_user_module_progresses_module_id");

                    b.HasIndex("ProgressStateId")
                        .HasDatabaseName("ix_user_module_progresses_progress_state_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_module_progresses_user_id");

                    b.ToTable("user_module_progresses", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "PermissionId")
                        .HasName("pk_user_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_user_permissions_permission_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_permissions_user_id");

                    b.ToTable("user_permissions", (string)null);
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text")
                        .HasColumnName("avatar_path");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("level");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Xp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_display_name");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "This is the admin user profile.",
                            DisplayName = "Admin",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Level = 1,
                            UpdatedAt = new DateTime(2025, 6, 8, 7, 56, 44, 839, DateTimeKind.Utc).AddTicks(8974),
                            Xp = 0
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeFile", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", null)
                        .WithMany("Files")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_files_challenge_problems_challenge_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeNode", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", "Problem")
                        .WithOne()
                        .HasForeignKey("ILS_BE.Domain.Models.ChallengeNode", "ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_challenge_nodes_challenge_problems_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeProblem", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_problems_challenge_categories_category_id");

                    b.HasOne("ILS_BE.Domain.Models.ChallengeState", "ChallengeState")
                        .WithMany()
                        .HasForeignKey("ChallengeStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_problems_challenge_states_challenge_state_id");

                    b.Navigation("Category");

                    b.Navigation("ChallengeState");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeProblemTag", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", null)
                        .WithMany()
                        .HasForeignKey("ChallengeProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_problem_tags_challenge_problems_challenge_problem");

                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", null)
                        .WithMany()
                        .HasForeignKey("ChallengeTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_problem_tags_challenge_problems_challenge_tag_id");

                    b.HasOne("ILS_BE.Domain.Models.ChallengeTag", null)
                        .WithMany()
                        .HasForeignKey("ChallengeTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_problem_tags_challenge_tags_challenge_tag_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeWriteup", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", null)
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_writeups_challenge_problems_challenge_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_challenge_writeups_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ExternalLogin", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_logins_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnLesson", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnLessonType", "LessonType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learn_lessons_learn_lesson_types_type_id");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnModule", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_learn_modules_learn_categories_category_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_learn_modules_users_created_by");

                    b.HasOne("ILS_BE.Domain.Models.LearnLifecycleState", "LifecycleState")
                        .WithMany()
                        .HasForeignKey("LifecycleStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_learn_modules_learn_lifecycle_states_lifecycle_state_id");

                    b.HasOne("ILS_BE.Domain.Models.LearnNode", "Node")
                        .WithOne()
                        .HasForeignKey("ILS_BE.Domain.Models.LearnModule", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learn_modules_learn_nodes_node_id");

                    b.Navigation("Category");

                    b.Navigation("LifecycleState");

                    b.Navigation("Node");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnModuleTag", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnModule", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learn_module_tags_learn_modules_module_id");

                    b.HasOne("ILS_BE.Domain.Models.LearnTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learn_module_tags_learn_tags_tag_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.LearnNode", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnLesson", "Lesson")
                        .WithOne()
                        .HasForeignKey("ILS_BE.Domain.Models.LearnNode", "LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_learn_nodes_learn_lessons_lesson_id");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("ILS_BE.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserChallengeFinish", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.ChallengeProblem", null)
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_challenge_finishes_challenge_problems_challenge_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_challenge_finishes_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserFinishedLesson", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnLesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_finished_lessons_learn_lessons_lesson_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_finished_lessons_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserModuleProgress", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.LearnModule", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_module_progresses_learn_modules_module_id");

                    b.HasOne("ILS_BE.Domain.Models.LearnProgressState", null)
                        .WithMany()
                        .HasForeignKey("ProgressStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_module_progresses_learn_progress_states_progress_state");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_module_progresses_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserPermission", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_permissions_permission_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserProfile", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("ILS_BE.Domain.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_users_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.UserRole", b =>
                {
                    b.HasOne("ILS_BE.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("ILS_BE.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.ChallengeProblem", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ILS_BE.Domain.Models.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
